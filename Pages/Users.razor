@page "/users"
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject SingleChatService _chatService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@using BlazorInputFile
<h3>Users</h3>

<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Chat Name:</span>
    </div>
    <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3" @bind="@NameChat">
</div>
<ul class="list-group">
    @foreach (var employee in employees)
    {
        <li class="list-group-item @(employee.Checked ? "active":"")" @onclick="@(e => employee.Checked = !employee.Checked)">
            @employee.user.UserName
        </li>
    }
</ul>

<button type="button" class="btn btn-primary btn-lg" @onclick="@CreateChat">Создать беседу</button>



@code{
    [Parameter]
    public Dictionary<string, object> InputAttributes { get; set; } =
        new Dictionary<string, object>()
        {
            { "hidden", "" },
            { "id", "file"}
        };

    List<Employee> employees { get; set; } = new List<Employee>();
    public User user { get; set; }
    List<User> UsersAll { get; set; }
    public string NameChat { get; set; }

    public class Employee
    {
        public User user { get; set; }
        public bool Checked { get; set; }
        public Employee(User user)
        {
            this.user = user;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        user = await _userManager.GetUserAsync(claimUser);

        UsersAll = _db.Users.Where(u => u.Id != user.Id).ToList();
        employees = UsersAll.Select(u => new Employee(u)).ToList();
    }

    public void CreateChat()
    {
        var userCheckeds = employees.Where(e => e.Checked).Select(e => e.user).ToList();
        userCheckeds.Add(user);
        //var groupChat = _chatService.GetChatByUsers(userCheckeds);
        if (userCheckeds.Count > 1 && !string.IsNullOrWhiteSpace(NameChat))
        {
            GroupChat groupChat = new GroupChat(NameChat);
            _db.GroupChats.Add(groupChat);
            _db.SaveChanges();

            userCheckeds.ForEach(u => u.ChatUsers.Add(new ChatUser { GroupChat = groupChat, User = u }));
            _db.SaveChanges();
            NavigationManager.NavigateTo($"chat/{groupChat.Id}/");
        }

    }


    async Task ViewFile(IFileListEntry[] files)
    {

    }
}
