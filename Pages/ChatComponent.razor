@page "/chat"
@page "/chat/{chatId}/"
@using Westwind.AspNetCore.Markdown
@using Microsoft.AspNetCore.Components;
@using BlazorInputFile;
@using System.IO;
@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment _env;
@inject SingleChatService _chatService;
@inject IJSRuntime JsRuntime;
@implements IDisposable
@**
        <head>
            <link rel="stylesheet" href="~/css/Textcss.css" />
            <link rel="stylesheet" href="~/css/ChatDes.css" />
        </head>
    **@
<AuthorizeView>
    <Authorized>
        <h2 class="text-center text-primary"> Chat: @(groupChat?.Name)</h2>
        <div class="container ">
            @if (groupChat != null)
            {
                @:Users:
                <p>

                    @foreach (var chatUser in groupChat?.ChatUsers)
                    {
                        @chatUser.User.UserName
                        <br />
                    }
                </p>
            }


            <div class="row ">
                <div class="col-md-3" style="margin-bottom: 10px;">
                    <button type="button" class="btn btn-outline-info @(Messages.Any(m => m.Selecting) ? "":"mydisable")" @onclick="@RemoveSelectedMessages">remove Message</button>
                    <button type="button" class="btn btn-outline-dark" @onclick="LogOut">log out of chat</button>
                </div>
                <div class="col-md-6  " id="chat">
                    @if (Messages != null)
                    {
                        int i = 0, j = 0;
                        @foreach (var message in Messages.OrderBy(m => m.When))
                        {
                            i++;
                        }
                        i = i - 10;
                        @foreach (var message in Messages.OrderBy(m => m.When))
                        {
                            j++;

                            if (j <= i)
                            {

                            }
                            else
                            {
                                string containerClass, timePosition, textAlign, contcolor;
                                if (user.UserName == message.UserName)
                                {
                                    contcolor = message.Selecting ? "bg-info" : "bg-primary";
                                    <div class="container darker @contcolor" @onclick="@(e => SelectMessage(message))">
                                        <p class="sender text-left text-white message-sender">
                                            @message.UserName
                                            <div class="float-right" @onclick="@(e => StartEditMessage(message))" @onclick:stopPropagation="true">
                                                <i class="fas fa-edit fa-lg"></i>
                                            </div>
                                        </p>
                                        <div class="text-left text-white message-text">@MarkdownParser.Parse(message.Text)</div>
                                        <span class="time-left text-light">@message.When.ToString()</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="container bg-light">
                                        <p class="sender text-left message-sender">@message.UserName</p>
                                        <div class="text-left message-text">@MarkdownParser.Parse(message.Text)</div>
                                        <span class="time-left">@message.When.ToString()</span>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
            <div class="col-md-12">
                <button type="button" class="btn btn-secondary @(IsEditing ? "":"mydisable")" style="margin-bottom: 10px;" @onclick="@StopEditMessage">stop change</button>
                <form method="post" action="#" enctype="multipart/form-data">
                    <label class="fileContainer mydisable" id="fileSelectBox" ondragleave="leaveDrop2(event)" ondrop="onDrop(event)" ondragover="dragOver(event)">
                        <InputFile multiple OnChange="ViewFile" />
                    </label>
                </form>
                <textarea id="chatSend" class="form-control" style="resize:none;" name="chat_message" ondragover="dragOver2(event)" placeholder="Send a message" rows="3" @bind-value="@newMessage" @bind-value:event="oninput"></textarea>
                <input type="submit" id="mybutton" @onclick="SendAll" class="btn btn-outline-primary btn-block" />
                <div id="mylastpage"></div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
        <div class="textIntroduction"> If you what see table with accounts, you need to login! </div>
    </NotAuthorized>
</AuthorizeView>





@code {
    [Parameter]
    public string chatId { get; set; }
    private User user { get; set; }
    public GroupChat groupChat { get; set; }
    private List<Message> Messages { get; set; } = new List<Message>();

    public string newMessage { get; set; } = null;
    string userName { get; set; } = null;

    private bool IsEditing { get; set; }
    private Message EditingMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Int32.TryParse(chatId, out int id) && await _chatService.InitChat(id))
        {
            user = _chatService.user;
            groupChat = _chatService.groupChat;
            groupChat.Sent += GotMessage;
            groupChat.Updated += UpdatedMessages;
            groupChat.ChangedMessage += ChangedMessage;
            Messages = _chatService.LocalMessages;

        }
        else
            NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        if (groupChat != null)
        {
            groupChat.Sent -= GotMessage;
            groupChat.Updated -= UpdatedMessages;
            groupChat.ChangedMessage -= ChangedMessage;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initChatEvent");
        }
    }



    public void GotMessage(Message newMessage)
    {
        _chatService.GotMessage(newMessage);
        InvokeAsync(StateHasChanged);
    }

    public void UpdatedMessages(List<Message> removeMessages)
    {
        _chatService.RemovedSelectedMessages(removeMessages);
        Messages = _chatService.LocalMessages;
        InvokeAsync(StateHasChanged);
    }

    public void ChangedMessage(string textMessage, Message editingMessage)
    {
        _chatService.ChangedMessage(textMessage, editingMessage);
        InvokeAsync(StateHasChanged);
    }



    public async Task SendAll(MouseEventArgs e)
    {
        if (!String.IsNullOrWhiteSpace(newMessage))
        {
            if (IsEditing)
            {
                _chatService.ChangeMessage(newMessage, EditingMessage);
                IsEditing = false;
            }
            else
                _chatService.SendMessage(newMessage, user);
            newMessage = null;
            SetFocus();
        }
    }

    public void SelectMessage(Message message)
    {
        message.Selecting = !message.Selecting;
    }

    public void RemoveSelectedMessages()
    {
        IsEditing = false;
        newMessage = null;
        _chatService.RemoveSelectedMessages();
        SetFocus();
    }

    public void LogOut()
    {
        _chatService.LogOutFromChat();
        NavigationManager.NavigateTo("");
    }

    public void StartEditMessage(Message message)
    {
        IsEditing = true;
        EditingMessage = message;
        newMessage = EditingMessage.Text;
        SetFocus();
    }

    public void StopEditMessage()
    {
        IsEditing = false;
        newMessage = null;
    }

    public async void SetFocus()
    {
        await JsRuntime.InvokeAsync<object>("setFocusToTextBox");
    }










    private string Token { get; set; }
    const string DefaultStatus = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    string status = DefaultStatus;
    string UrlShared;

    string fileName;
    string fileTextContents;

    async Task ViewFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            status = "Loading...";

            using (var ms = new MemoryStream())
            {
                Task task1 = file.Data.CopyToAsync(ms);
                await file.Data.CopyToAsync(ms);
                ms.Seek(0, SeekOrigin.Begin);
                File.WriteAllBytes(Path.Combine(_env.WebRootPath, "download", file.Name), ms.ToArray());
            }

            status = DefaultStatus;
        }
    }
}
